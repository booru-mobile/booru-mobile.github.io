{"version":3,"sources":["components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchPage","_ref","initialResultsUrl","nextResultsUrl","_React$useState","React","useState","searchQuery","searchResults","loading","_React$useState2","Object","slicedToArray","state","setState","updateState","newState","prevState","assign","resultsRef","useRef","_useInView","useInView","_useInView2","ref","length","lastPostId","id","fetch","query","then","response","json","concat","filter","post","file_url","setTimeout","react_default","a","createElement","onSubmit","event","preventDefault","type","value","onChange","_ref2","target","onClick","current","scrollTo","map","_ref3","description","key","src","alt","PAGE_SIZE","Home","Fragment","react_router_dom","to","Boolean","window","location","hostname","match","ReactDOM","render","REACT_APP_API_BASE_URL","process","react_router","exact","path","component","SearchPage_SearchPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17ea5074.chunk.js","sourcesContent":["import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport './SearchPage.css';\n\nexport function SearchPage({ initialResultsUrl, nextResultsUrl }) {\n  const [state, setState] = React.useState({\n    searchQuery: \"\",\n    searchResults: [],\n    loading: false,\n  });\n\n  function updateState(newState) {\n    setState(prevState => Object.assign({}, prevState, newState));\n  }\n\n  function setSearchQuery({ target: { value: searchQuery }}) {\n    updateState({ searchQuery });\n  }\n\n  const resultsRef = React.useRef();\n\n  function search(event) {\n    event.preventDefault();\n\n    updateState({ loading: true });\n\n    fetch(initialResultsUrl(state.searchQuery))\n      .then(response => response.json())\n      .then(searchResults => {\n        updateState({ searchResults: searchResults.filter(post => post.file_url) });\n        setTimeout(() => updateState({ loading: false }), 300);\n      });\n  }\n\n  const [ref, inView] = useInView();\n  if (inView && !state.loading && state.searchResults.length > 0) {\n    updateState({ loading: true });\n\n    const lastPostId = state.searchResults[state.searchResults.length - 1].id;\n    fetch(nextResultsUrl({ query: state.searchQuery, lastPostId }))\n      .then(response => response.json())\n      .then(searchResults => {\n        setState(prevState => Object.assign({}, prevState, {\n          searchResults: prevState.searchResults.concat(searchResults.filter(post => post.file_url)),\n        }));\n        setTimeout(() => updateState({ loading: false }), 300);\n      });\n  }\n\n  return (\n    <div id=\"search_page\">\n      <form onSubmit={search}>\n        <input type=\"text\" value={state.searchQuery} onChange={setSearchQuery} />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" onClick={() => resultsRef.current.scrollTo(0, 0)}>\n          Back to top\n        </button>\n      </form>\n\n      <section ref={resultsRef}>\n        <ol>\n          {state.searchResults.map(({ file_url, description }) => (\n            <li key={file_url}>\n              <img src={file_url} alt={description} />\n            </li>\n          ))}\n\n          {state.loading && (\n            <li key=\"spinner\">\n              Loading...\n            </li>\n          )}\n        </ol>\n\n        <div ref={ref} />\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport { SearchPage } from './components/SearchPage';\n\nconst PAGE_SIZE = 25;\n\nfunction Home() {\n  return (\n    <>\n      <h1>\n        booru mobile\n      </h1>\n      <p>\n        <Link to=\"/e621\">e621</Link>\n      </p>\n      <p>\n        <Link to=\"/danbooru\">danbooru</Link>\n      </p>\n    </>\n  );\n}\n\nexport default function App() {\n  const { REACT_APP_API_BASE_URL } = process.env;\n\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n\n      <Route path=\"/e621\" render={() => (\n        <SearchPage\n          initialResultsUrl={query => `${REACT_APP_API_BASE_URL}/e621/post/index.json?limit=${\n            PAGE_SIZE\n          }&tags=${query}&_client=booru-mobile/1.0`}\n          nextResultsUrl={({ query, lastPostId }) => `${REACT_APP_API_BASE_URL}/e621/post/index.json?limit=${\n            PAGE_SIZE\n          }&before_id=${lastPostId}&tags=${query}&_client=booru-mobile/1.0`}\n        />\n      )} />\n\n      <Route path=\"/danbooru\" render={() => (\n        <SearchPage\n          initialResultsUrl={query => `${REACT_APP_API_BASE_URL}/danbooru/posts.json?limit=${\n            PAGE_SIZE\n          }&tags=${query}&page=1&_client=booru-mobile/1.0`}\n          nextResultsUrl={({ query, lastPostId }) => `${REACT_APP_API_BASE_URL}/danbooru/posts.json?limit=${\n            PAGE_SIZE\n          }&tags=${query}&page=b${lastPostId}&_client=booru-mobile/1.0`}\n        />\n      )} />\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}