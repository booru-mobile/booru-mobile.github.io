{"version":3,"sources":["components/SearchPage.js","clients/BooruClient.js","clients/DanbooruClient.js","clients/E621Client.js","App.js","serviceWorker.js","index.js"],"names":["SearchPage","_ref","client","_React$useState","React","useState","searchQuery","searchResults","loading","_React$useState2","Object","slicedToArray","state","setState","updateState","newState","prevState","assign","resultsRef","useRef","_useInView","useInView","_useInView2","ref","length","lastPostId","id","fetch","getNextResults","then","response","json","concat","filter","post","file_url","setTimeout","react_default","a","createElement","onSubmit","event","preventDefault","getInitialResults","type","value","onChange","_ref2","target","onClick","current","scrollTo","_ref3","source","includes","map","_ref4","large_file_url","description","key","src","alt","BooruClient","classCallCheck","this","apiBaseUrl","process","pageSize","createClass","query","get","limit","_client","DanbooruClient","_BooruClient","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","buildUrl","path","queryParams","commonQueryParams","page","tags","E621Client","before_id","Home","Fragment","react_router_dom","to","Boolean","window","location","hostname","match","ReactDOM","render","react_router","exact","component","SearchPage_SearchPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dda814da.chunk.js","sourcesContent":["import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport './SearchPage.css';\n\nexport function SearchPage({ client }) {\n  const [state, setState] = React.useState({\n    searchQuery: \"\",\n    searchResults: [],\n    loading: false,\n  });\n\n  function updateState(newState) {\n    setState(prevState => Object.assign({}, prevState, newState));\n  }\n\n  function setSearchQuery({ target: { value: searchQuery }}) {\n    updateState({ searchQuery });\n  }\n\n  const resultsRef = React.useRef();\n\n  function search(event) {\n    event.preventDefault();\n\n    updateState({ loading: true });\n\n    fetch(client.getInitialResults(state.searchQuery))\n      .then(response => response.json())\n      .then(searchResults => {\n        updateState({ searchResults: searchResults.filter(post => post.file_url) });\n        setTimeout(() => updateState({ loading: false }), 300);\n      });\n  }\n\n  const [ref, inView] = useInView();\n  if (inView && !state.loading && state.searchResults.length > 0) {\n    updateState({ loading: true });\n\n    const lastPostId = state.searchResults[state.searchResults.length - 1].id;\n    fetch(client.getNextResults(state.searchQuery, lastPostId))\n      .then(response => response.json())\n      .then(searchResults => {\n        setState(prevState => Object.assign({}, prevState, {\n          searchResults: prevState.searchResults.concat(searchResults.filter(post => post.file_url)),\n        }));\n        setTimeout(() => updateState({ loading: false }), 300);\n      });\n  }\n\n  return (\n    <div id=\"search_page\">\n      <form onSubmit={search}>\n        <input type=\"text\" value={state.searchQuery} onChange={setSearchQuery} />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" onClick={() => resultsRef.current.scrollTo(0, 0)}>\n          Back to top\n        </button>\n      </form>\n\n      <section ref={resultsRef}>\n        <ol>\n          {state.searchResults\n            .filter(({ source }) => !source || !source.includes('pximg'))\n            .map(({ large_file_url, file_url, description }) => (\n              <li key={large_file_url || file_url}>\n                <img src={large_file_url || file_url} alt={description} />\n              </li>\n            ))}\n\n          {state.loading && (\n            <li key=\"spinner\">\n              Loading...\n            </li>\n          )}\n        </ol>\n\n        <div ref={ref} />\n      </section>\n    </div>\n  );\n}\n","export class BooruClient {\n  apiBaseUrl = process.env.REACT_APP_API_BASE_URL;\n  pageSize = 25;\n\n  get commonQueryParams() {\n    return {\n      limit: this.pageSize,\n      _client: 'booru-mobile/1.0',\n    };\n  }\n\n  getInitialResults(query) {}\n\n  getNextResults(query, lastPostId) {}\n}\n","import buildUrl from 'build-url';\n\nimport { BooruClient } from './BooruClient';\n\nexport class DanbooruClient extends BooruClient {\n  getInitialResults(query) {\n    return buildUrl(this.apiBaseUrl, {\n      path: '/danbooru/posts.json',\n      queryParams: Object.assign(this.commonQueryParams, {\n        page: 1,\n        tags: query,\n      }),\n    });\n  }\n\n  getNextResults(query, lastPostId) {\n    return buildUrl(this.apiBaseUrl, {\n      path: '/danbooru/posts.json',\n      queryParams: Object.assign(this.commonQueryParams, {\n        page: `b${lastPostId}`,\n        tags: query,\n      }),\n    });\n  }\n}\n","import buildUrl from 'build-url';\n\nimport { BooruClient } from './BooruClient';\n\nexport class E621Client extends BooruClient {\n  getInitialResults(query) {\n    return buildUrl(this.apiBaseUrl, {\n      path: '/e621/post/index.json',\n      queryParams: Object.assign(this.commonQueryParams, { tags: query }),\n    });\n  }\n\n  getNextResults(query, lastPostId) {\n    return buildUrl(this.apiBaseUrl, {\n      path: '/e621/post/index.json',\n      queryParams: Object.assign(this.commonQueryParams, {\n        before_id: lastPostId,\n        tags: query,\n      }),\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport { SearchPage } from './components/SearchPage';\nimport { DanbooruClient } from './clients/DanbooruClient';\nimport { E621Client } from './clients/E621Client';\n\nfunction Home() {\n  return (\n    <>\n      <h1>\n        booru mobile\n      </h1>\n      <p>\n        <Link to=\"/e621\">e621</Link>\n      </p>\n      <p>\n        <Link to=\"/danbooru\">danbooru</Link>\n      </p>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n\n      <Route path=\"/e621\" render={() => <SearchPage client={new E621Client()} />} />\n\n      <Route path=\"/danbooru\" render={() => <SearchPage client={new DanbooruClient()} />} />\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}